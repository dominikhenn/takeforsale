(window.webpackJsonpAdministration=window.webpackJsonpAdministration||[]).push([[90174],{822168:function(){},390174:function(t,n,e){"use strict";e.r(n),e.d(n,{default:function(){return i}}),e(360649);let{hasOwnProperty:s}=Shopware.Utils.object;var i={template:'{% block sw_settings %}\n<sw-page\n    class="sw-settings-index"\n    :show-smart-bar="false"\n>\n\n    {% block sw_settings_content %}\n    <template #content>\n        <sw-card-view>\n            {% block sw_settings_content_card_view %}\n            <sw-card\n                v-if="feature.isActive(\'v6.7.0.0\')"\n                hero\n                class="sw-settings__card--hero"\n                position-identifier="sw-settings-index"\n            >\n                {% block sw_settings_content_card_view_header %}\n                <h1 class="sw-settings__content-header">\n                    {{ $tc(\'sw-settings.index.title\') }}\n                </h1>\n                {% endblock %}\n\n                {% block sw_settings_content_card_content_grid %}\n                <div class="sw-settings__content-grid" position-identifier="sw-settings-index-content">\n                    <div v-for="(settingsItems, settingsGroup) in settingsGroups"\n                         :key="settingsGroup"\n                         class="sw-settings__content-group"\n                    >\n                        <h2>{{ getGroupLabel(settingsGroup) }}</h2>\n\n                        <sw-settings-item\n                            v-for="settingsItem in settingsItems"\n                            :id="settingsItem.id"\n                            :key="settingsItem.name"\n                            :label="getLabel(settingsItem)"\n                            :to="getRouteConfig(settingsItem)"\n                            :background-enabled="settingsItem.backgroundEnabled"\n                        >\n                            <template #icon>\n                                <component\n                                    :is="settingsItem.iconComponent"\n                                    v-if="settingsItem.iconComponent"\n                                />\n                                <sw-icon\n                                    v-else\n                                    :name="settingsItem.icon"\n                                />\n                            </template>\n                        </sw-settings-item>\n                    </div>\n                </div>\n                {% endblock %}\n            </sw-card>\n            {% endblock %}\n\n            {# @deprecated tag:v6.7.0 - block will be removed #}\n            {% block sw_settings_content_tabs %}\n            <sw-tabs\n                v-if="!feature.isActive(\'v6.7.0.0\')"\n                class="sw-settings__tabs"\n                position-identifier="sw-settings-index"\n                :is-vertical="true"\n                :small="false"\n            >\n                <template #default="{ active }">\n                    {# @deprecated tag:v6.7.0 - block will be removed #}\n                    {% block sw_settings_content_tab_shop %}\n                    <sw-tabs-item\n                        v-if="settingsGroups[\'shop\']"\n                        class="sw-settings__tab-shop"\n                        :route="{ name: \'sw.settings.index.shop\'}"\n                        name="shop"\n                        :active-tab="active"\n                        :title="$tc(\'sw-settings.index.tabShop\')"\n                    >\n                        {{ $tc(\'sw-settings.index.tabShop\') }}\n                    </sw-tabs-item>\n                    {% endblock %}\n\n                    {# @deprecated tag:v6.7.0 - block will be removed #}\n                    {% block sw_settings_content_tab_system %}\n                    <sw-tabs-item\n                        v-if="settingsGroups[\'system\']"\n                        class="sw-settings__tab-system"\n                        name="system"\n                        :route="{ name: \'sw.settings.index.system\'}"\n                        :active-tab="active"\n                        :title="$tc(\'sw-settings.index.tabSystem\')"\n                    >\n                        {{ $tc(\'sw-settings.index.tabSystem\') }}\n                    </sw-tabs-item>\n                    {% endblock %}\n\n                    {# @deprecated tag:v6.7.0 - block will be removed #}\n                    {% block sw_settings_content_tab_plugins %}\n                    <sw-tabs-item\n                        v-if="hasPluginConfig()"\n                        class="sw-settings__tab-plugins"\n                        name="plugins"\n                        :route="{ name: \'sw.settings.index.plugins\'}"\n                        :active-tab="active"\n                        :title="$tc(\'sw-settings.index.tabPlugins\')"\n                    >\n                        {{ $tc(\'sw-settings.index.tabPlugins\') }}\n                    </sw-tabs-item>\n                    {% endblock %}\n                </template>\n\n                <template #content="{ active }">\n                    {# @deprecated tag:v6.7.0 - block will be removed #}\n                    {% block sw_settings_content_card %}\n\n                    {# @deprecated tag:v6.7.0 - block will be removed #}\n                    {% block sw_settings_content_header %}\n                    <h1 class="sw-settings__content-header">\n                        {{ $tc(\'sw-settings.index.title\') }}\n                    </h1>\n                    {% endblock %}\n\n                    <sw-card\n                        class="sw-settings__card"\n                        position-identifier="sw-settings-index-content"\n                    >\n                        {# @deprecated tag:v6.7.0 - block will be removed #}\n                        {% block sw_settings_content_card_content %}\n                        <slot\n                            v-for="(settingsItems, settingsGroup) in settingsGroups"\n                            :key="settingsGroup"\n                            :name="settingsGroup"\n                            :aria-label="$tc(\'sw-settings.index.title\')"\n                        >\n                            <nav\n                                v-show="active === settingsGroup"\n                                :id="`sw-settings__content-grid-${settingsGroup}`"\n                                class="sw-settings__content-grid"\n                            >\n                                <sw-settings-item\n                                    v-for="settingsItem in settingsItems"\n                                    :id="settingsItem.id"\n                                    :key="settingsItem.name"\n                                    :label="getLabel(settingsItem)"\n                                    :to="getRouteConfig(settingsItem)"\n                                    :background-enabled="settingsItem.backgroundEnabled"\n                                >\n                                    <template #icon>\n                                        <component\n                                            :is="settingsItem.iconComponent"\n                                            v-if="settingsItem.iconComponent"\n                                        />\n                                        <sw-icon\n                                            v-else\n                                            :name="settingsItem.icon"\n                                        />\n                                    </template>\n                                </sw-settings-item>\n                            </nav>\n                        </slot>\n                        {% endblock %}\n                    </sw-card>\n                    {% endblock %}\n                </template>\n            </sw-tabs>\n            {% endblock %}\n        </sw-card-view>\n    </template>\n    {% endblock %}\n</sw-page>\n{% endblock %}\n',compatConfig:Shopware.compatConfig,inject:["acl","feature"],metaInfo(){return{title:this.$createTitle()}},computed:{settingsGroups(){return Object.entries(Shopware.State.get("settingsItems").settingsGroups).reduce((t,[n,e])=>{let s=e.filter(t=>!t.privilege||this.acl.can(t.privilege)).sort((t,n)=>{let e="string"==typeof t.label?t.label:t.label?.label,s="string"==typeof n.label?n.label:n.label?.label;return this.$tc(e).localeCompare(this.$tc(s))});return s.length>0&&(t[n]=s),t},{})}},methods:{hasPluginConfig(){return s(this.settingsGroups,"plugins")&&this.settingsGroups.plugins.length>0},getRouteConfig(t){return s(t,"to")?"string"==typeof t.to?{name:t.to}:"object"==typeof t.to?t.to:{}:{}},getLabel(t){return s(t,"label")?"string"==typeof t.label?this.$tc(t.label):"object"==typeof t.label&&s(t.label,"translated")&&s(t.label,"label")&&"string"==typeof t.label.label?t.label.translated?t.label.label:this.$tc(t.label.label):"":""},getGroupLabel(t){let n=t.charAt(0).toUpperCase()+t.slice(1);return this.$tc(`sw-settings.index.tab${n}`)}}}},360649:function(t,n,e){var s=e(822168);s.__esModule&&(s=s.default),"string"==typeof s&&(s=[[t.id,s,""]]),s.locals&&(t.exports=s.locals),(0,e(370534).A)("f3ebfc6c",s,!0,{})}}]);